一、基本命令
1、启动服务
     说明：以管理员身份运行CMD
     格式：net start 服务名称
     实例：net start mysql57
2、停止服务
     说明：以管理员身份运行CMD
     格式：net stop 服务名称
     实例：net stop mysql57
3、连接数据库
     格式：mysql -u 用户名 -p
     实例：mysql -u root -p
4、断开数据库
     格式：exit或者quit
5、查看版本
     格式：select version();
6、显示当前时间
      格式：select now();
7、远程连接
      格式:mysql -h ip地址 -u 用户名 -p
      输入对方的mysql密码

二、数据库操作
    1、创建数据
    格式：create database 数据库名 charset=utf8；
    2、删除数据库
    格式：drop database 数据库名

    3、切换数据库
    格式：use 数据库名

    4、查看当前选择的数据库
    格式：select database();

三、表操作
    1、查看当前数据中所有表
    格式：show tables;
    2、创建表
    格式：create table 表名(列，及类型)
    说明:auto_increment 表示自增长
    primary key主键
    not null表示不为空
    实例：create table student(id int auto_increment primary key,name varchar(20) not null,age int not null,gender bit not null default 1,address varchar(20),isDelete bit default 0);
    3、删除表
    格式：drop table 表名；
    4、查看表结构
    格式：desc 表名
    5、查看建表语句
    格式：show create table 表名
    6、重命名表名
    格式：rename table 原表名 to 新表名
    7、修改表
    格式：alter table 表名 add|change|drop 列名 类型


四、数据操作

1、增
    a、全列插入：
        格式：insert into 表名 values(...)
        说明：主键列是总动增长，但是在全列插入时需要占位，通常使用0，插入成功以后以实际数据为准
        实例：insert into stu values(0,"tom",18,1,"隆回",0)
    b、缺省插入：
        格式：insert into 表名(列1，列2，……) values(值1,值2)
        实例：insert int stu(name,age,address) values("lilei",19,"小沙江")
    c、同时插入多条数据：
        格式：insert into 表名 values(……),(...),....
        实列：insert into stu values(0,"xiao",21,0,"荷香桥",0),(0,"jack",22,1,"桃洪镇",0)
2、删
    格式：delete from 表名 where 条件;
    实例:delete from stu where id=4;
    ！！！ 没有条件的 全部删除，慎用！
3、改
    格式：update 表名 set 列1=值1,列2=值2,..., where 条件;
    实例：update stu set age=16 where id=3;
    ！！！ 没有条件的 全部修改，慎用！
4、查
    说明：查询表中的全部是数据
    格式：select * from 表名;

五、查
    1、基本语法
        格式：select * from 表名;
        说明:
            a、from 关键字后面是表名,表示数据来源于这张表
            b、select后面写表中的列名，如果是*表示在结果集中显示表中的所有列
            c、在select 后面的列名部分,可以使用as为列名起别名，这个别名显示在结果集中
            d、如果要查询多个列，使用逗号分隔
        示例：
            select * from stu;
            select name,age from stu;
            select name as a,age from stu;
    2、消除重复行
        说明：在select后面列前面使用distinct可以消除重复的行
        示例：select distinct gender from stu;
    3、条件查询
        a、语法
            select * from 表名 where 条件;
        b、比较运算符
            等于  =
            小于  <
            大于  >
            小于等于    <=
            大于等于    >=
            不等于     != 或<>
            需求：查询id值大于3的所有数据
            示例:select * from stu where id>3;
        c、逻辑运算符
            and 并且
            or  或者
            not 非
            需求：查询id值大于3的女同学
            示例：select * from student where id>7 and gender=0;
        d、模糊查询
            like
            % 表示任意多个任意字符
            _表示任意一个字符
            需求：查询姓习得同学
            示例：select * from stu where name lie "习%";
        e、范围查询
            in 表示在一个非连续得范围内
            需求：查询编号是2、6、8的人
            示例：select * from student where id in(8,10,12);
            between...and...    表示在一个连续得范围内
            需求：查询编号为6-8的学生
            示例：select * from stu where id between 6 and 8;


        f、空判断
        注意：null与""是不同的
            判断空：is null
            判断非空：is not null
            需求：查询没有地址的同学
            示例：select * from stu where address is null;
        g、优先级
            小括号，not 比较运算符 ，逻辑运算符
            and比or优先级高，如果同时出现并希望先选or，需要结合()使用
    4、聚合
        为了快速得到统计数据，提供了5个聚合函数
        a、count(*) 表示计算总行数，括号中可以写*和列名
        b、max(列)  表示求此列的最大值
        c、min(列)  表示求此列的最小值
        d、sum(列)  表示求此列的和
        e、avg(列)  表示求此列的平均值
        需求：查询学生总数
        示例：select count(*) form stu;
        需求：查询女生编号的最大值
        示例：select max(id) from stu where gender=0;
        需求：查询女生编号的最小值
        示例：select min(id) from stu where gender=0;
        需求：查询所有学生年龄和
        示例：select sum(age) from stu;
        需求：查询所有学生年龄的平均值
        示例：select avg(age) from stu;

    5、分组
        按照字段分组，表示此字段相同的数据会被放到一个集合中。分组后，只能查询出相同数据的列，对于有差异的数据列，无法显示在结果集中，可以对分组后的数据进行统计，做聚合运算
        语法：select 列1,列2,聚合... from 表名 group by 列1,列2,...;
        需求：查询男女生总数
        示例：select gender,count(*) from stu group by gender;
             select name,gender,count(*) from stu group by gender,age;
        分组后的数据筛选:select 列1,列2,聚合... from 表名 group by 列1,列2,...,having 列1,列2,...,聚合...;
        示例：select gender,count(*) from stu group by gender having gender;


        where与having的区别：
            where是对from后面指定的表进行筛选，属于对原始数据进行的筛选
            having 是对group by的结果进行筛选
    6、排序
        语法:select * from 表名 order by 列1 asc|desc,列2 asc|desc,...;
        说明：
            a、将数据按照column1进行排序如果某些column1的值相同则按照column2进行排序
            b、默认升序
            c、asc降序
            d、desc升序
        需求：按年龄排序
        示例：select * from stu where isDelete=0 order by age;
              select * from stu where isDelete=0 order by age,id;
    7、分页
        语法:select * from 表名 limit start,count;
        示例：select * from stu limit 0,3;
        说明：start 索引从0开始

六、关联
    建表语句:
        1、create table class(id int auto_increment primary key,name varchar(20) not null,stuNum int not null);
        2、create table student(id int auto_increment primary key,name varchar(20) not null,gender bit default 1,classid int not null,foreign key(classid) references class(id));
    插入一些数据：
    insert into class values(0,"三年2班",55),(0,"三年1班",60),(0,"三年3班",50);

    insert into student values(0,"tom",1,1);
    insert into student values(0,"jack",1,2);
    insert into student values(0,"xiao",1,1),(0,"pange",1,1),(0,"tao",1,1),(0,"luo",1,1);

    关联查询:


    分类:
        1、表A　inner　join　表B
        select student.name,class.name from class inner join student on class.id=student.classid;
            说明：表示表A与表B匹配的行会出现在结果集中
        2、表A left join 表B：
        select student.name,class.name from class left join student on class.id=student.classid;
            表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充
        3、表A right join 表B：
        select student.name,class.name from class right join student on class.id=student.classid;
            表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充